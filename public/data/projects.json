[
	{
		"project_id": "1",
		"project_title": "Anonymous Notes",
		"project_description": "A full-stack website utilizing the MERN stack and CRUD operations for note-posting",
		"project_image": "/assets/anonymous-notes-thumbnail.png",
		"project_read_more_link": "/project-showcase/anonymous-notes/about",
		"project_link": "https://anonymous-notes-five.vercel.app/",
		"project_tools": [
			"MongoDB",
			"Express_JS",
			"React_JS",
			"Node_JS",
			"Vercel",
			"TailwindCSS",
			"TypeScript",
			"Vite"
		],
		"project_github_link": "https://github.com/Hairum-Qureshi/mern-crud-notes-app",
		"project_landscape_image": "/assets/anonymous-notes-landscape.png",
		"project_about": "## Anonymous Notes (MERN CRUD App)\n\n### Project Overview\nAnonymous Notes is a personal project and my first deployed MERN stack application. The app allows anyone to create, view, edit, and delete sticky notes anonymously, providing a simple platform to quickly jot down thoughts or ideas. No login or authentication is required, making the app lightweight and accessible.\n\nThe project served as a hands-on introduction to building full-stack applications using **MongoDB, Express.js, React, Node.js**, and **TailwindCSS**, while exploring **TypeScript** for type safety and **Vite** for fast frontend development.\n\n## Technologies Used\n- **MongoDB** - Storing note data in a flexible NoSQL database.\n- **Express.js** - Backend API for handling CRUD operations.\n- **React.js (with Vite)** - Frontend for building an interactive and responsive UI.\n- **Node.js** - Runtime environment powering the backend.\n- **TailwindCSS** - Utility-first CSS framework for responsive layouts and dark mode.\n- **TypeScript** - Ensuring type safety across both frontend and backend.\n\n## Features\n- Users can **create, read, update, and delete notes** seamlessly.\n- Fully **responsive interface** optimized for mobile and desktop devices.\n- Supports **light and dark mode**, enhancing user experience.\n- **Persistent notes with cookies:** Users can return to their old posts and continue editing or deleting them. If inactive for more than a week, access to these notes is removed.\n- No login required, with **rate limiting** implemented to prevent abuse.\n\n## Challenges\n- Designing a **fully responsive UI** that works well on both mobile and desktop screens.\n- Implementing **light and dark mode** toggling across the app.\n- Handling **CORS issues** and environment variables when deploying the backend and frontend separately.\n- Debugging asynchronous operations for CRUD functionality in a full-stack environment.\n- Implementing the **sticky note feature with autosave** while ensuring users could return to a note and continue editing without losing progress. This required carefully managing state, cookies, and API updates to avoid conflicts or data loss.\n\n## What I Learned\n- Gained experience structuring a **full MERN stack application** end-to-end.\n- Strengthened **React state management** and component design skills.\n- Developed a deeper understanding of **API integration** between frontend and backend.\n- Practiced configuring **deployment settings**, environment variables, and connecting Vercel to a backend API.\n- Improved **responsive design skills** using TailwindCSS and refined my mobile-first workflow.\n- Learned the nuances of **persistent state with cookies** and autosave behavior for a better user experience.\n\n## Reflection\nAnonymous Notes gave me practical experience in building a **user-facing product** from scratch while balancing usability, responsiveness, and backend functionality. While some bugs remain in the sticky note posting feature, the project taught me valuable lessons in full-stack development and debugging. If I were to continue improving it, I'd add features like search, note categorization, or real-time collaboration."
	},
	{
		"project_id": "2",
		"project_title": "Halalsters",
		"project_description": "A single-page website built with React.js for my cousins' and I's halal Pakistani food business",
		"project_image": "/assets/halasters-thumbnail.png",
		"project_read_more_link": "/project-showcase/halalsters/about",
		"project_link": "https://halalsters.vercel.app/",
		"project_tools": [
			"React_JS",
			"Vercel",
			"TailwindCSS",
			"TypeScript",
			"Vite"
		],
		"project_github_link": "https://github.com/Hairum-Qureshi/halalsters-website",
		"project_landscape_image": "/assets/halalsters-landscape.png",

		"project_about": "## Halalsters Website (Personal Project)\n\n**Halalsters** (pronounced *halal-sters*) was a small food business started by my cousins to provide authentic, homemade frozen Pakistani foods ranging from samosas to spring rolls. The business was short-lived due to kitchen space and time constraints, but I decided to create a website as a side project to give it a professional online presence.\n\nI built a **single-page application (SPA)** using:\n\n* **React** for component-based structure\n* **Vite** for fast development and builds\n* **Tailwind CSS** for utility-first styling and rapid UI prototyping\n\nThe site included:\n\n* A **menu** of available items\n* A **FAQ** section\n* **Contact information** for placing orders\n* Necessary **disclaimers**\n\n#### What Was Tricky\n\n* Making the site **mobile-friendly** while keeping it lightweight as a SPA\n* Establishing a **consistent theme** and UI that reflected the brand's food focus\n* Choosing **fonts and styles** that felt authentic yet modern â€” a design decision I'm particularly proud of\n\n#### What I Gained\n\n* Strengthened my **Tailwind CSS** skills in real-world responsive design\n* Improved my **mobile-first workflow**, especially testing layouts on different screen sizes\n* Practiced delivering a **polished SPA** quickly under minimal requirements\n\n#### Reflection\n\nAlthough Halalsters was paused, the project gave me practical experience in building a user-facing product that balanced functionality and branding. If the business were revived, I'd extend the site to include **online ordering and payment integration** to better serve customers."
	},
	{
		"project_id": "3",
		"project_title": "Novice Ink. Writer's Club",
		"project_description": "This is a sample project description.",
		"project_image": "",
		"project_read_more_link": "/project-showcase/novice-ink-writers-club/about",
		"project_link": "",
		"project_tools": [
			"HTML",
			"CSS",
			"JavaScript",
			"Firebase",
			"Express_JS",
			"Node_JS",
			"EJS"
		],
		"project_github_link": "",
		"project_landscape_image": "",
		"project_about": ""
	},
	{
		"project_id": "4",
		"project_title": "UD CIS Chatbot (Capstone Extension)",
		"project_description": "A chatbot leveraging Google Gemini and RAG for UD CIS graduate students to answer program-related questions.",
		"project_image": "/assets/grad-catalog-thumbnail.png",
		"project_read_more_link": "/project-showcase/ud-cis-chatbot-(capstone-extension)/about",
		"project_link": "https://ud-grad-catalog.onrender.com/",
		"project_tools": [
			"Node_JS",
			"Express_JS",
			"TypeScript",
			"TailwindCSS",
			"HTML",
			"Gemini"
		],
		"project_github_link": "https://github.com/Hairum-Qureshi/gradcatalog-ai",
		"project_landscape_image": "/assets/grad-catalog-landscape.png",
		"project_about": "## UD CIS Chatbot (Capstone Extension)\n\n### Project Overview\nThis project is an extension of my capstone course, where we leveraged **Google Gemini** to build a chatbot for UD CIS graduate students. The chatbot allows students to ask questions about the graduate program and receive accurate answers based on curated content.\n\nI worked on expanding the dataset of questions that the AI model references through a JSON source. One category I handled involved the graduate catalog. To avoid manually compiling questions from numerous catalog links, I automated the process using **web scraping** with Node.js and TypeScript.\n\nThe implementation involved:\n- Setting up a **Node.js and Express.js server**\n- Configuring **Google Gemini**\n- Creating API endpoints to feed curated JSON content to Gemini\n- Scraping relevant links and consolidating page content into JSON\n- Using Gemini to select helpful links and generate accurate responses to user queries\n\n### Challenges\n- No prior experience with web scraping or implementing RAG with Gemini\n- Handling **retrieval-augmented generation (RAG)** in a way that ensured timely, relevant, and accurate answers\n- Avoiding repeated API calls and optimizing response time\n\n### Current Implementation\n- The chatbot reliably retrieves accurate answers from curated JSON content\n- Responses are tailored to the UD CIS graduate program\n- If a question is outside the knowledge base, the chatbot provides an appropriate notification\n\n### Future Improvements\n- **Caching with Redis or alternative storage:** Eliminate repeated page fetches to improve response speed.\n- **Backtracking in RAG:** Reassess link selections after fetching content to improve answer accuracy.\n- **Frontend feedback system:** Allow users to upvote, downvote, or report answers to improve dataset quality and model performance.\n\n### Technologies Used\n- **Node.js & Express.js** - Backend server and API endpoints\n- **TypeScript** - Type-safe implementation for web scraping and server logic\n- **Google Gemini** - AI model for generating answers based on curated JSON content\n- **TailwindCSS** - Styling for frontend (if applicable)\n- **HTML** - Structuring frontend components"
	}
]
